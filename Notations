import java.util.ArrayList;

public class NotationStack<T> implements StackInterface<T> {
    
    private int numOfElements;
    private final int MAX_SIZE;
    private T[] elements;

    public NotationStack() {
        this(5);
    }

    @SuppressWarnings("unchecked")
    public NotationStack(int size) {
        MAX_SIZE = size;
        elements = (T[]) new Object[MAX_SIZE];
        numOfElements = 0;
    }

    public NotationStack(ArrayList<T> elements) {
        this(elements.size());
        ArrayList<T> newElements = (ArrayList<T>) elements.clone();
        for (T element : newElements)
            try {
                push(element);
            } catch (StackOverflowException e) {
                System.err.println(e);
            }
    }

    @Override
    public boolean isEmpty() {
        return numOfElements == 0;
    }

    @Override
    public boolean isFull() {
        return numOfElements == MAX_SIZE;
    }

    @Override
    public T pop() throws StackUnderflowException {
        if (isEmpty())
            throw new StackUnderflowException();
        return elements[--numOfElements];
    }

    @Override
    public T top() throws StackUnderflowException {
        if (isEmpty())
            throw new StackUnderflowException();
        return elements[numOfElements - 1];
    }

    @Override
    public int size() {
        return numOfElements;
    }

    @Override
    public boolean push(T e) throws StackOverflowException {
        if (isFull())
            throw new StackOverflowException();
        elements[numOfElements++] = e;
        return true;
    }

    @Override
    public String toString() {
        StringBuilder finishedString = new StringBuilder();
        for (int i = 0; i < numOfElements; i++)
            finishedString.append(elements[i] == null ? "" : elements[i]);
        return finishedString.toString();
    }

    @Override
    public String toString(String delimiter) {
        StringBuilder finishedString = new StringBuilder();
        for (int i = 0; i < numOfElements; i++)
            finishedString.append(elements[i] == null ? "" : elements[i]).append(elements[i] == null ? "" : delimiter);
        finishedString.delete(finishedString.length() - delimiter.length() < 0 ? 0 : finishedString.length() - delimiter.length(), finishedString.length());
        return finishedString.toString();
    }

    public void fill(ArrayList<T> elements) throws StackOverflowException {
        for (T element : elements) {
            try {
                push(element);
            } catch (StackOverflowException e) {
                System.err.println(e);
                throw e; 
            }
        }
    }
}
